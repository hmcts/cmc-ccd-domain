#!groovy

@Library("Infrastructure")
import uk.gov.hmcts.contino.AppPipelineConfig

def type = "java"
def product = "cmc"
def component = "ccd"
AppPipelineConfig pipelineConf

static Map<String, Object> secret(String secretName, String envVariable) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   envVariable: envVariable
  ]
}

def secrets = [
  's2s-${env}': [
    secret('microservicekey-ccd-gw', 'CCD_API_GATEWAY_S2S_SECRET'),
    secret('microservicekey-ccd-data', 'CCD_DATA_STORE_S2S_SECRET'),
    secret('microservicekey-ccd-definition', 'CCD_DEFINITION_STORE_S2S_SECRET')
  ],
  'ccd-${env}': [
    secret('ccd-api-gateway-oauth2-client-secret', 'CCD_API_GATEWAY_IDAM_CLIENT_SECRET'),
    secret('postcode-info-address-lookup-token', 'ADDRESS_LOOKUP_TOKEN')
  ],
  'cmc-${env}': [
    secret('ccd-importer-username', 'CCD_CONFIGURER_IMPORTER_USERNAME'),
    secret('ccd-importer-password', 'CCD_CONFIGURER_IMPORTER_PASSWORD')
  ]
]

def createGithubRelease() {
  sh """
    ./definition/bin/create-github-release.sh
  """
}

def archiveCoreCaseDataDefinitions() {
  if ( env.ENVIRONMENT == 'aat') {
    echo "current environemnt is ${env.ENVIRONMENT}"
    for(PROD_ENV in ["aat","prod"]){
      echo "environemnt is ${PROD_ENV}"
      dir("${WORKSPACE}/definition/bin") {
        sh """
          eval \$(./variables/load-${PROD_ENV}-environment-variables.sh)
          ./build-release-ccd-definition.sh ${PROD_ENV}
        """
      }

      dir("${WORKSPACE}/build") {
        steps.archiveArtifacts artifacts: "ccd-release-config/cmc-ccd-${PROD_ENV}.xlsx"
      }
    }

  } else if ( env.ENVIRONMENT == 'preview') {
    dir("${WORKSPACE}/definition/bin") {
      sh """
          eval \$(./variables/load-preview-environment-variables.sh ${CHANGE_ID})
          ./build-release-ccd-definition.sh preview
      """
    }

    dir("${WORKSPACE}/build") {
      steps.archiveArtifacts artifacts: "ccd-release-config/cmc-ccd-preview.xlsx"
    }
  } else {
    dir("${WORKSPACE}/definition/bin") {
      sh """
          eval \$(./variables/load-${env.ENVIRONMENT}-environment-variables.sh)
          ./build-release-ccd-definition.sh ${env.ENVIRONMENT}
        """
    }

    dir("${WORKSPACE}/build") {
      steps.archiveArtifacts artifacts: "ccd-release-config/cmc-ccd-${env.ENVIRONMENT}.xlsx"
    }
  }
}

def uploadCoreCaseDataDefinitions(env) {
  dir("${WORKSPACE}/definition/bin"){
    ccdDefinitionFilePath="${WORKSPACE}/build/ccd-release-config/cmc-ccd-${env}.xlsx"
    sh """
      eval \$(./variables/load-${env}-environment-variables.sh)
      ./utils/ccd-import-definition.sh ${ccdDefinitionFilePath}
    """
  }
}

withPipeline(type, product, component) {
  pipelineConf = config
  disableLegacyDeployment()
  enableAksStagingDeployment()
  enableSlackNotifications('#cmc_tech_notifications')
  syncBranchesWithMaster(['demo'])
  enableHighLevelDataSetup()
  loadVaultSecrets(secrets)

  onPR {
    env.ENVIRONMENT = "preview"
    env.DEFINITION_STORE_URL_BASE = "https://ccd-definition-store-cmc-ccd-pr-${CHANGE_ID}.service.core-compute-preview.internal"
  }
  onMaster {
    env.ENVIRONMENT="aat"
  }
  onDemo {
    env.ENVIRONMENT = "demo"
  }
  onPerftest{
    env.ENVIRONMENT = "perftest"
  }

  after('test') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/tests/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/tests/integration/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/test-results/**/*.xml'
  }

  before('highleveldatasetup') {
    archiveCoreCaseDataDefinitions()
  }

  before('smoketest:preview') {
  }

  after('smoketest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
  }

  before('functionalTest:preview') {
  }

  after('functionalTest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
  }

  before('smoketest:aat') {
  }

  after('smoketest:aat') {
  }

  before('functionalTest:aat') {
  }

  after('functionalTest:aat') {
  }
}
