plugins {
    id 'application'
    id 'checkstyle'
    id 'jacoco'
    id 'org.owasp.dependencycheck' version '6.2.2'
    id 'com.github.ben-manes.versions' version '0.39.0'
    id 'org.sonarqube' version '3.3'
    id 'net.ltgt.apt' version '0.21'
    id 'au.com.dius.pact' version '4.2.7'
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

allprojects {
    sourceCompatibility = '11'
    targetCompatibility = '11'

    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'checkstyle'
    apply plugin: 'org.owasp.dependencycheck'
    apply plugin: 'com.github.ben-manes.versions'
    apply plugin: 'net.ltgt.apt'
    apply plugin: 'org.sonarqube'

    checkstyle {
        maxWarnings = 0
        toolVersion = '8.29'
        getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
    }

    jacoco {
        toolVersion = '0.8.5' // jacocoMavenPluginVersion
        reportsDir = file("$buildDir/reports/jacoco")
    }

// before committing a change, make sure task still works
    dependencyUpdates {
        def isNonStable = { String version ->
            def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
            def regex = /^[0-9,.v-]+$/
            return !stableKeyword && !(version ==~ regex)
        }
        rejectVersionIf { selection -> // <---- notice how the closure argument is named
            return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
        }
    }

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
    dependencyCheck {
        // Specifies if the build should be failed if a CVSS score above a specified level is identified.
        // range of 0-10 fails the build, anything greater and it doesn't fail the build
        failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
        suppressionFile = 'config/owasp/suppressions.xml'

        analyzers {
            // Disable scanning of .NET related binaries
            assemblyEnabled = false
        }
    }

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven {
            url 'https://jitpack.io'
        }
        maven {
            url  "http://repo.spring.io/milestone"
        }
        maven {
            url  "https://repo.spring.io/libs-milestone"
        }
    }
}

sourceSets {
    functionalTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/functionalTest/java')
        }
        resources.srcDir file('src/functionalTest/resources')
    }

    smokeTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/smokeTest/java')
        }
        resources.srcDir file('src/smokeTest/resources')
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

tasks.withType(Test) {
    useJUnitPlatform()

    testLogging {
        exceptionFormat = 'full'
    }
}

test {
    failFast = true
}

jar {
    getArchiveFileName().set(provider {
        'empty.jar'
    })

    manifest {
        attributes('Implementation-Version': project.version.toString())
    }
}

project.tasks['sonarqube'].dependsOn test, jacocoTestReport

sonarqube {
    properties {
        property "sonar.projectName", "CMC :: CCD Domain"
        property "sonar.projectKey", "cmc-ccd-domain"
        property "sonar.host.url", "https://sonar.reform.hmcts.net/"
        property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
        property "sonar.junit.reportPaths", 'build/test-results/junit-platform'
        property "sonar.jacoco.reportPaths", "${project.buildDir}/jacoco/junitPlatformTest.exec"
        property "sonar.coverage.exclusions", "**/*.java"
    }
}

jacocoTestReport {
    executionData(test)
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
    subprojects.each {
        sourceSets it.sourceSets.main
    }
    reports {
        xml.enabled = true
        csv.enabled = false
        xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
}

jacocoTestReport.dependsOn {
    subprojects*.test
}

def versions = [
        junit              : '5.7.0',
        junitPlatform      : '1.7.1'
]

ext.libraries = [
        junit5: [
                "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
                "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
                "org.junit.jupiter:junit-jupiter-params:${versions.junit}",
                "org.junit.platform:junit-platform-commons:${versions.junitPlatform}",
                "org.junit.platform:junit-platform-engine:${versions.junitPlatform}"
        ]
]

dependencies {
    implementation group: 'com.github.hmcts', name: 'befta-fw', version: '8.2.0'

    testImplementation libraries.junit5

    functionalTestImplementation sourceSets.main.runtimeClasspath

    smokeTestImplementation sourceSets.main.runtimeClasspath
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

project.ext {
    pactVersion = getCheckedOutGitCommitHash()
}

def getCheckedOutGitCommitHash() {
    'git rev-parse --verify --short HEAD'.execute().text.trim()
}