plugins {
    id 'java'
    id 'maven'
    id 'maven-publish'
    id 'checkstyle'
    id 'java-library'
    id 'jacoco'
    id 'com.jfrog.bintray' version "1.8.4"
    id 'io.spring.dependency-management' version '1.0.6.RELEASE'
    id 'org.springframework.boot' version '2.1.3.RELEASE' apply false
    id 'org.owasp.dependencycheck' version '6.2.2'
    id 'com.github.ben-manes.versions' version '0.39.0'
    id 'org.sonarqube' version '3.3'
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven {
        url "http://dl.bintray.com/hmcts/hmcts-maven/"
    }
    maven {
        url 'https://jitpack.io'
    }
    maven {
        url "http://repo.spring.io/milestone"
    }
    maven {
        url "https://repo.spring.io/libs-milestone"
    }
}

dependencyManagement {
	imports {
		mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
	}
}

dependencies {
    compile group: 'com.github.hmcts', name: 'befta-fw', version: '8.2.0'
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.10'

    compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations'
    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.6'
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'config/owasp/suppressions.xml'

    analyzers {
        // Disable scanning of .NET related binaries
        assemblyEnabled = false
    }
}

jar {
    manifest {
        attributes 'Implementation-Title': project.name, 'Implementation-Version': project.version
    }
}

project.tasks['sonarqube'].dependsOn test, jacocoTestReport

sonarqube {
    properties {
        property "sonar.projectName", "CMC :: ccd-domain"
        property "sonar.projectKey", "cmc-ccd-domain"
        property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
        property "sonar.coverage.exclusions", "**/HighLevelDataSetupApp.java"
        property "sonar.host.url", "https://sonar.reform.hmcts.net/"
    }
}

jacocoTestReport {
    executionData(test)
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
    subprojects.each {
        sourceSets it.sourceSets.main
    }
    reports {
        xml.enabled = true
        csv.enabled = false
        xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
}

jacocoTestReport.dependsOn {
    subprojects*.test
}

checkstyle {
  maxWarnings = 50
  toolVersion = '8.14'
}

task printVersion {
    doLast {
        print project.version
    }
}

task highLevelDataSetup(type: JavaExec) {
    main = "uk.gov.hmcts.cmc.ccd.domain.befta.HighLevelDataSetupApp"
    classpath += sourceSets.main.runtimeClasspath
    jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

def pomConfig = {
    licenses {
        license {
            name "MIT License"
            url "http://www.opensource.org/licenses/mit-license.php"
            distribution "repo"
        }
    }

    scm {
        url "https://github.com/hmcts/cmc-ccd-domain"
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        Main(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId project.group
            artifactId project.name
            version project.version

            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Domain associated with money claim in ccd')
                root.appendNode('name', 'Money Claim CCD Domain')
                root.appendNode('url', 'https://github.com/hmcts/cmc-ccd-domain')
                root.children().last() + pomConfig
            }
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    publications = ['Main']
    publish = true
    pkg {
        repo = 'hmcts-maven'
        name = project.name
        userOrg = 'hmcts'
        licenses = ['MIT']
        vcsUrl = 'https://github.com/hmcts/cmc-ccd-domain'
        version {
            name = project.version
        }
    }
}
