import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'checkstyle'
    id 'jacoco'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.springframework.boot' version "2.7.18"
    id 'org.owasp.dependencycheck' version '9.2.0'
    id 'com.github.ben-manes.versions' version '0.52.0'
    id 'org.sonarqube' version '3.5.0.2730'
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
    mavenLocal()
    maven { url 'https://jitpack.io' }
}

dependencyManagement {
    imports {
        mavenBom SpringBootPlugin.BOM_COORDINATES
    }
}

dependencies {
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.38'

    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.19.0'
    implementation group: 'org.projectlombok', name: 'lombok', version: '1.18.38'
    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'

    testImplementation group: 'com.github.hmcts', name: 'befta-fw', version: '8.10.1'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.12.2'
}

bootJar {
    enabled = false
}

jar {
    enabled = true

    manifest {
        attributes 'Implementation-Title': project.name, 'Implementation-Version': project.version
    }
}

checkstyle {
    maxWarnings = 0
    toolVersion = '8.45.1'
    getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

task printVersion {
    doLast {
        print project.version
    }
}

def pomConfig = {
    licenses {
        license {
            name "MIT License"
            url "http://www.opensource.org/licenses/mit-license.php"
            distribution "repo"
        }
    }

    scm {
        url "https://github.com/hmcts/cmc-ccd-domain"
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

task highLevelDataSetup(type: JavaExec) {
    main = "uk.gov.hmcts.cmc.HighLevelDataSetupApp"
    classpath += sourceSets.test.runtimeClasspath
    jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        Main(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId project.group
            artifactId project.name
            version project.version

            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Domain associated with money claim in ccd')
                root.appendNode('name', 'Money Claim CCD Domain')
                root.appendNode('url', 'https://github.com/hmcts/cmc-ccd-domain')
                root.children().last() + pomConfig
            }
        }
    }
}
